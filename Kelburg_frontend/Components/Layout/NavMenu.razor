@using Kelburg_frontend.Services
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthService AuthService


<nav class="navbar navbar-expand-lg navbar-light" style="background-color: #D9D9D9;">
    <div class="container-fluid">
        <button class="btn" type="button"
                data-bs-toggle="offcanvas" data-bs-target="#offcanvasMenu"
                aria-controls="offcanvasMenu">
            <span class="navbar-toggler-icon"></span>
            <span class="ms-2">Menu</span>
        </button>

        <a class="navbar-brand position-absolute start-50 translate-middle-x" href="" style="color: black;">
            <img src="images/logo.png" style="max-height: 50px;">
        </a>

        <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
            @if (string.IsNullOrEmpty(loggedInUserName))
            {
                <li class="nav-item px-2">
                    <NavLink class="nav-link" href="/Login" style="color: black;">Login</NavLink>
                </li>
            }
            else
            {
                <li class="nav-item px-2">
                    <span class="nav-link px-2" style="color: black;">@loggedInUserName</span>
                </li>
                <li class="nav-item px-2">
                    <button class="nav-link btn" style="color: black;" @onclick="Logout">Logout</button>
                </li>
            }

            <li class="nav-item px-2">
                <NavLink class="nav-link" href="/Rooms" style="color: black;">Book Room</NavLink>
            </li>
        </ul>
    </div>
</nav>

<div class="offcanvas offcanvas-start" tabindex="-1"
     id="offcanvasMenu" aria-labelledby="offcanvasMenuLabel"
     style="background-color: #D9D9D9; color: black;">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="offcanvasMenuLabel" style="color: black;">Menu</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas"
                aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <ul class="navbar-nav">
            <!-- Added onClick handler to each NavLink -->
            <li class="nav-item">
                <NavLink class="nav-link" to="/rooms" href="/rooms" onClick="closeOffcanvas()" style="color: black;">
                    Rooms
                </NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link" to="/activities" href="/activities" onClick="closeOffcanvas()"
                         style="color: black;">Activities
                </NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link" to="/facilities" href="/facilities" onClick="closeOffcanvas()"
                         style="color: black;">Facilities
                </NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link" to="/photolibrary" href="/photolibrary" onClick="closeOffcanvas()"
                         style="color: black;">Photo library
                </NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link" to="/career" href="/career" onClick="closeOffcanvas()" style="color: black;">
                    Career
                </NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link" to="/createinquiry" href="/createinquiry" onClick="closeOffcanvas()"
                         style="color: black;">Create Inquiry
                </NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link" to="/aboutus" href="/aboutus" onClick="closeOffcanvas()"
                         style="color: black;">About us
                </NavLink>
            </li>
        </ul>
    </div>
</div>

<style>
    .offcanvas .navbar-nav .nav-link {
        transition: background-color 0.3s;
        border-radius: 15px;
        font-size: 1.2rem; /* Increased font size */
        padding: 12px 20px; /* More padding for a larger clickable area */
        background-color: #D9D9D9;
    }

    .offcanvas .navbar-nav .nav-link:hover {
        background-color: #bfbfbf;
        color: black;
    }
</style>

<script>
    // Define a function to close the offcanvas
    function closeOffcanvas() {
        const offcanvasElement = document.getElementById('offcanvasMenu');
        // Get the existing instance or create a new one
        const offcanvasInstance = bootstrap.Offcanvas.getInstance(offcanvasElement) || new bootstrap.Offcanvas(offcanvasElement);
        offcanvasInstance.hide();
    }

    window.getLoggedInUserName = () => {
        return localStorage.getItem("loggedInUserName");
    };

    window.setLoggedInUserName = (name) => {
        localStorage.setItem("loggedInUserName", name);
    };

</script>

@code
{
    private string loggedInUserName;
    [Inject] NavigationManager navigationManager { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        loggedInUserName = await JSRuntime.InvokeAsync<string>("getLoggedInUserName");
        StateHasChanged();
    }

    private async Task Logout()
    {
        // Call the logout method in AuthService
        await AuthService.Logout();

        // Redirect to the login page
        NavigationManager.NavigateTo("/login", forceLoad: true);
    }
}
